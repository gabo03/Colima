---

- hosts: all
  user: root
  tasks:

  - name: Test that git ssh connection is working. Allow SSH Agent Forwarding
    command: ssh -T git@github.com	
	

   
   
  vars: 
    createuser: 'ansibleremote'
    createpassword: 'myamazingpassword'
  tasks:
  - name: Setup | create user
    command: useradd -m {{ createuser }} creates=/home/{{ createuser }}
    sudo: true
 
  - name: Setup | set user password
    shell: usermod -p $(echo '{{ createpassword }}' | openssl passwd -1 -stdin) {{ createuser }}
    sudo: true
 
  - name: Setup | authorized key upload
    authorized_key: user={{ createuser }}
      key="{{ lookup('file', 'mypublickey.pub') }}"
      path='/home/{{ createuser }}/.ssh/authorized_keys'
      manage_dir=no
    sudo: true
 
  - name: Sudoers | update sudoers file and validate
    lineinfile: "dest=/etc/sudoers
      insertafter=EOF
      line='{{ createuser }} ALL=(ALL) NOPASSWD: ALL'
      regexp='{{ createuser }} ALL=(ALL) NOPASSWD: ALL'
      state=present"
    sudo: true
	


vars:
    - rbenv_root: /usr/local/rbenv
    - ruby_version: 2.1.0
 
  tasks:
    - name: rbenv | install build depends
      apt: pkg={{ item }} state=latest install_recommends=no
      with_items:
        - build-essential
        - git
        - libcurl4-openssl-dev
        - libmysqlclient-dev
        - libreadline5-dev
        - libssl-dev
        - libxml2-dev
        - libxslt1-dev
        - zlib1g-dev
 
    - name: rbenv | update rbenv repo
      git: repo=git://github.com/sstephenson/rbenv.git dest={{ rbenv_root }} version=v0.4.0
 
    - name: rbenv | add rbenv to path
      file: path=/usr/local/bin/rbenv src={{ rbenv_root }}/bin/rbenv state=link
 
    - name: rbenv | add rbenv initialization to profile
      template: src=templates/rbenv.sh.j2 dest=/etc/profile.d/rbenv.sh owner=root group=root mode=0755
 
    - name: rbenv | check ruby-build installed
      command: test -x /usr/local/bin/ruby-build
      register: rbuild_present
      ignore_errors: yes
 
    - name: rbenv | create temporary directory
      command: mktemp -d
      register: tempdir
      when: rbuild_present|failed
 
    - name: rbenv | clone ruby-build repo
      git: repo=git://github.com/sstephenson/ruby-build.git dest={{ tempdir.stdout }}/ruby-build
      when: rbuild_present|failed
 
    - name: rbenv | install ruby-build
      command: ./install.sh chdir={{ tempdir.stdout }}/ruby-build
      when: rbuild_present|failed
 
    - name: rbenv | remove temporary directory
      file: path={{ tempdir.stdout }} state=absent
      when: rbuild_present|failed
 
    - name: rbenv | check ruby {{ ruby_version }} installed
      shell: RBENV_ROOT={{ rbenv_root }} rbenv versions | grep {{ ruby_version }}
      register: ruby_installed
      ignore_errors: yes
 
    - name: rbenv | install ruby {{ ruby_version }}
      shell: RBENV_ROOT={{ rbenv_root }} rbenv install {{ ruby_version }}
      when: ruby_installed|failed
 
    - name: rbenv | set global ruby {{ ruby_version }}
      shell: RBENV_ROOT={{ rbenv_root }} rbenv global {{ ruby_version }}
      when: ruby_installed|failed
 
    - name: rbenv | rehash
      shell: RBENV_ROOT={{ rbenv_root }} rbenv rehash
      when: ruby_installed|failed
 
    - name: rbenv | set gemrc
      copy: src=files/gemrc dest=/root/.gemrc owner=root group=root mode=0644
	  
	  
	  
	  
vars:
    repository_basedir: ..
    memcached_memory: 256

  tasks:
  # Install Memcached
  - include: $repository_basedir/memcached/tasks/setup.yml

  # Install PHP CLI 
  - include: $repository_basedir/php/tasks/setup.yml

  # Install PHP bindings for Memcached 
  # The PECL extention for PHP has an option to install the session handlers during the install procedure
  # cf. php:pecl.yml for further info.
  - include: $repository_basedir/php/tasks/pecl.yml package=memcache version=beta stdin=Yes\n
  
  - name: Memcached | Config file for the PHP memcache extension
  action: template src=templates/etc-php5-conf-d-memcache-ini.j2 dest=/etc/php5/conf.d/memcache.ini
  tags: memcached
  
  
  
  
- name: Install dependancies
  action: apt pkg={{ item }} state=present
  sudo: yes
  when: result|failed
  with_items:
    - libpcre3
    - libpcre3-dev
    - libgd2-xpm-dev
    - libgeoip-dev
    - libpam0g-dev
    - libcurl4-gnutls-dev
    - zlibc
    - zlib1g
    - zlib1g-dev
  
  - name: Download Source
  get_url: url=http://nginx.org/download/nginx-{{ nginx.version }}.tar.gz dest=/opt/
  when: result|failed

- name: Unzip Nginx Tar
  unarchive: src=/opt/nginx-{{ nginx.version }}.tar.gz dest=/opt copy=no group={{ app.group }} owner={{ app.user }}
  when: result|failed
  
  - name: Make
  shell: /usr/bin/make chdir=/opt/nginx-{{ nginx.version }}/
  sudo: yes
  when: result|failed

- name: Make Install
  shell: /usr/bin/make install chdir=/opt/nginx-{{ nginx.version }}/
  sudo: yes
  when: result|failed
  